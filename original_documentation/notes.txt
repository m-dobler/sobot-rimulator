== Development Constraints:
  - This is strictly a 2D simulator. It is not built to be extensible into the third dimension.

  - All solid geometries must be convex. This is the assumption in collision tests and sensor detection algorithms.
    If concave objects are needed, building them out of multiple convex objects should be a fully functional alternative.
    Alternatively, more advanced collision detection algorithms can be added.

  - Regarding physical limits on robot velocities: Sim.I.Am implements limits on angular and translational velocities, i.e. the parameters of the unicycle model. It seemed more realistic to implement physical limits on the individual robot drive motors (maximum angular velocity of each). In addition, the robot Supervisor can be "programmed" to maintain drive signals within a certain envelope of unicycle-model velocities. The physical and "programmed" limits together will bound the possible behavior of the robot.



== Potential Performance Improvements:
  - Efficient linear algebra library to replace custom-built functions in linalg2_util.py
  
  - More sophisticated detection algorithm improvements, particularly line-polygon intersect test
  
  - Better control loop architecture to ensure ONLY necessary robot headings are computed ONLY one time per loop



== Known Issues:
  - The IR sensor detection algorithm is not ideal - although drawn as cones, the IR sensors are effectively only lines (down the middle of the drawn cones). For most cases this is sufficient to emulate real-world behavior fairly well, however it causes cornering behavior for the robot to be more jerky than would probably be the actual case, due to rapid switching of the control state.
  
  - Drawn traverse paths are appended to every time a frame is drawn. This design assumes the frame is drawn only one time between simulation steps. However, this might not be the case - e.g. when invisibles are toggles, the frame is redrawn. Therefore, every time invisibles are toggled, the traverse path is appended with an additional copy of it's current position. This is not a problem as of this writing, but can, for example, cause the (currently-disabled) "rich" traverse path to display incorrectly.